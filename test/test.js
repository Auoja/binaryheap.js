var BinaryHeap = require('../binaryheap.js');
var assert = require("assert");

var largeTestArray = [12, 96, 17, 5, 55, 85, 40, 21, 64, 72, 40, 61, 61, 94, 24, 49, 59, 95, 40, 61, 88, 51, 49, 71, 16, 87, 70, 15, 51, 35, 52, 87, 26, 11, 14, 94, 82, 34, 49, 38, 64, 6, 78, 80, 0, 5, 78, 19, 37, 11, 68, 4, 46, 94, 74, 41, 49, 50, 45, 71, 14, 90, 80, 37, 27, 77, 68, 49, 98, 88, 23, 69, 57, 21, 32, 82, 89, 97, 68, 69, 30, 14, 87, 79, 16, 35, 20, 15, 29, 39, 79, 12, 82, 15, 66, 0, 49, 51, 33, 1, 8, 86, 81, 57, 73, 53, 96, 87, 76, 28, 55, 79, 45, 27, 53, 24, 26, 96, 6, 75, 87, 15, 30, 31, 32, 50, 61, 68, 66, 88, 45, 31, 59, 53, 70, 25, 11, 46, 85, 82, 77, 59, 42, 74, 30, 4, 41, 84, 69, 23, 84, 43, 37, 47, 72, 63, 2, 61, 85, 48, 43, 99, 44, 95, 57, 32, 50, 39, 51, 92, 8, 65, 62, 9, 66, 55, 20, 39, 94, 48, 95, 40, 16, 46, 34, 60, 80, 92, 73, 10, 92, 28, 65, 74, 53, 3, 27, 44, 6, 32, 20, 62, 56, 79, 62, 79, 94, 65, 92, 28, 64, 36, 87, 33, 61, 73, 38, 49, 13, 90, 19, 12, 54, 54, 27, 7, 25, 82, 92, 48, 44, 35, 58, 61, 34, 58, 97, 47, 89, 2, 56, 12, 15, 50, 27, 18, 83, 29, 17, 31, 61, 34, 39, 24, 39, 12, 67, 92, 71, 69, 55, 73, 20, 72, 82, 89, 74, 6, 40, 1, 79, 95, 45, 90, 11, 18, 16, 55, 37, 86, 52, 41, 32, 39, 48, 19, 69, 14, 87, 48, 96, 49, 76, 31, 69, 36, 31, 54, 9, 1, 71, 8, 25, 82, 18, 26, 7, 70, 64, 67, 97, 97, 12, 82, 44, 3, 10, 34, 97, 62, 21, 15, 96, 7, 63, 81, 76, 60, 92, 53, 68, 85, 7, 9, 15, 4, 19, 77, 78, 97, 37, 1, 59, 98, 53, 75, 40, 0, 87, 23, 89, 63, 17, 87, 80, 2, 97, 61, 68, 60, 93, 80, 48, 92, 99, 51, 78, 23, 16, 74, 12, 12, 50, 12, 86, 97, 76, 22, 56, 97, 91, 78, 46, 44, 1, 68, 45, 59, 5, 16, 45, 77, 62, 21, 57, 95, 92, 36, 91, 1, 34, 99, 31, 3, 10, 61, 56, 85, 55, 76, 34, 58, 8, 45, 7, 63, 0, 87, 44, 46, 61, 8, 74, 40, 56, 58, 84, 62, 93, 61, 69, 93, 97, 70, 11, 57, 76, 29, 79, 24, 84, 43, 24, 49, 33, 18, 95, 41, 78, 2, 92, 86, 22, 19, 59, 71, 82, 61, 77, 49, 64, 60, 37, 83, 13, 18, 40, 0, 13, 68, 90, 73, 28, 26, 6, 62, 1, 52, 80, 3, 53, 68, 73, 9, 39, 67, 69, 37, 59, 81, 85, 0, 52, 88, 7, 76, 0, 48, 18, 8, 94, 43, 39, 95, 35, 50, 65, 23, 6, 12, 64, 47, 13, 5, 18, 39, 91, 25, 92, 67, 99, 99, 3, 29, 14, 2, 83, 78, 71, 46, 94, 55, 50, 1, 33, 57, 34, 46, 67, 68, 18, 87, 90, 72, 43, 38, 89, 25, 1, 96, 89, 11, 91, 93, 25, 34, 32, 45, 32, 23, 76, 38, 10, 57, 72, 34, 75, 5, 84, 56, 77, 45, 58, 73, 72, 41, 84, 94, 84, 93, 11, 34, 21, 83, 47, 26, 21, 86, 94, 82, 72, 0, 69, 50, 18, 23, 41, 62, 33, 83, 53, 16, 49, 46, 79, 30, 92, 29, 26, 40, 11, 95, 16, 56, 35, 74, 13, 8, 1, 2, 63, 21, 38, 54, 95, 28, 1, 70, 57, 61, 6, 5, 73, 23, 29, 75, 25, 39, 1, 18, 19, 5, 74, 45, 83, 32, 43, 28, 71, 68, 36, 46, 42, 45, 13, 18, 19, 4, 66, 67, 70, 98, 40, 19, 36, 20, 65, 15, 24, 45, 38, 39, 35, 15, 44, 3, 74, 17, 11, 24, 90, 49, 50, 43, 27, 20, 21, 4, 13, 30, 49, 5, 82, 31, 79, 33, 66, 30, 24, 35, 82, 62, 81, 36, 72, 61, 88, 99, 64, 0, 18, 5, 88, 18, 34, 8, 87, 37, 57, 26, 87, 95, 55, 8, 72, 27, 88, 63, 12, 72, 17, 21, 51, 84, 65, 94, 47, 46, 42, 25, 30, 59, 84, 91, 76, 16, 8, 76, 45, 32, 48, 58, 90, 69, 74, 23, 72, 38, 69, 4, 4, 64, 18, 53, 66, 14, 52, 72, 29, 43, 94, 78, 55, 75, 57, 45, 48, 74, 55, 58, 66, 5, 3, 47, 2, 65, 36, 18, 74, 15, 40, 57, 15, 92, 76, 2, 57, 97, 61, 26, 88, 64, 29, 36, 13, 43, 56, 82, 66, 99, 1, 67, 32, 49, 89, 34, 71, 34, 71, 36, 36, 65, 53, 44, 92, 45, 85, 2, 95, 33, 29, 5, 28, 68, 67, 48, 8, 73, 17, 91, 60, 76, 16, 16, 43, 27, 55, 47, 98, 40, 66, 29, 28, 34, 24, 48, 11, 26, 51, 91, 31, 91, 56, 43, 19, 41, 97, 64, 97, 79, 36, 87, 46, 15, 67, 37, 99, 7, 41, 76, 26, 64, 66, 26, 22, 30, 58, 53, 2, 49, 89, 57, 44, 60, 26, 57, 57, 45, 10, 90, 28, 83, 72, 77, 6, 71, 94, 30, 75, 51, 41, 13, 39, 41, 64, 91, 63, 56, 12, 70, 53, 50, 24, 3, 86, 26, 0, 82, 77, 48, 84, 31, 3, 73, 67, 82, 69, 48, 37, 50, 26, 2, 95, 43, 9, 28, 62, 29, 58, 97, 48, 77, 99, 14, 49, 49, 38, 55, 45, 49, 36, 8, 21, 55, 29, 80, 42, 91, 87, 39, 69, 33, 86, 43, 69, 24, 76, 81, 87, 44, 12, 11, 92, 56, 86, 12, 98, 54, 35, 71, 53, 2, 21, 78, 42, 56, 60, 44, 47, 53];

describe('Large Array Convertion', function() {

    describe('Validate Max Heap', function() {

        it('Should return 1000 if array is the same size as heap', function() {
            var maxHeap = BinaryHeap.createMaxHeap();
            maxHeap.push(largeTestArray);

            assert.equal(largeTestArray.length, maxHeap.size());
        });

    });

    describe('Validate Min Heap', function() {

        it('Should return 1000 if array is the same size as heap', function() {
            var minHeap = BinaryHeap.createMinHeap();
            minHeap.push(largeTestArray);

            assert.equal(largeTestArray.length, minHeap.size());
        });

    });

});

describe('Object Heaps', function() {

    describe('Validate Min Heap', function() {

        var minHeap = BinaryHeap.createMinHeap(function(a) {
            return a.age;
        });
        var John = {
            name: "John",
            age: 13
        };
        var Carl = {
            name: "Carl",
            age: 45
        };
        var Sarah = {
            name: "Sarah",
            age: 19
        };
        var Nathalie = {
            name: "Nathalie",
            age: 28
        };

        minHeap.push([John, Carl, Sarah, Nathalie]);

        it('Should return person with highest age', function() {
            assert.equal(John, minHeap.peek());
        });

        it('Should return the highest age', function() {
            assert.equal(John.age, minHeap.peekValue());
        });
    });

    describe('Validate Max Heap', function() {

        var maxHeap = BinaryHeap.createMaxHeap(function(a) {
            return a.age;
        });
        var John = {
            name: "John",
            age: 13
        };
        var Carl = {
            name: "Carl",
            age: 45
        };
        var Sarah = {
            name: "Sarah",
            age: 19
        };
        var Nathalie = {
            name: "Nathalie",
            age: 28
        };

        maxHeap.push([John, Carl, Sarah, Nathalie]);

        it('Should return person with highest age', function() {
            assert.equal(Carl, maxHeap.peek());
        });

        it('Should return the highest age', function() {
            assert.equal(Carl.age, maxHeap.peekValue());
        });
    });

});